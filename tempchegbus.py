
'''Voc√™ tem 2 scripts separados:

aprendizagem_maquina.py  -  coletar_onibus.py ‚Üí coleta da API da SPTrans e salva em CSV
(esse √© o script que autentica, pega posi√ß√µes e cria onibus_linha_8000.csv)

tempchegbus.py ‚Üí an√°lise e previs√£o (ML)
(esse √© o script que l√™ o CSV j√° existente e treina o modelo)

para rodar python tempchegbus.py aprendizagem_maquina.py
'''


'''Ideia do modelo

Voc√™ coleta dados da API (√¥nibus em circula√ß√£o + hor√°rio).
Gera features como: hor√°rio do dia, dia da semana, latitude, longitude.
A vari√°vel alvo pode ser, por exemplo, o tempo de chegada em um ponto espec√≠fico.
Como voc√™ ainda n√£o coletou dados suficientes, vou simular com uma l√≥gica simples para mostrar como montar o pipeline.
'''








import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, r2_score

# === Simula√ß√£o de dados coletados (voc√™ substituir√° pelo CSV real da API) ===
# Suponha que voc√™ salvou dados de √¥nibus passando em um ponto espec√≠fico
np.random.seed(42)
n = 300

df = pd.DataFrame({
    "latitude": -23.55 + np.random.normal(0, 0.01, n),
    "longitude": -46.63 + np.random.normal(0, 0.01, n),
    "hora_dia": np.random.randint(0, 24, n),   # hora do dia
    "dia_semana": np.random.randint(0, 7, n),  # 0=Segunda ... 6=Domingo
    "tempo_chegada_min": np.random.randint(2, 30, n) # alvo (r√≥tulo)
})

print("Exemplo de dataset:")
print(df.head())

# === Separar features (X) e target (y) ===
X = df[["latitude", "longitude", "hora_dia", "dia_semana"]]
y = df["tempo_chegada_min"]

# === Treinar/Testar ===
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

modelo = LinearRegression()
modelo.fit(X_train, y_train)

# === Avaliar ===
y_pred = modelo.predict(X_test)

print("\nüìä Resultados do modelo:")
print(f"MAE (erro absoluto m√©dio): {mean_absolute_error(y_test, y_pred):.2f} minutos")
print(f"R¬≤ (qualidade do ajuste): {r2_score(y_test, y_pred):.2f}")

# === Testar previs√£o ===
amostra = pd.DataFrame({
    "latitude": [-23.55],
    "longitude": [-46.63],
    "hora_dia": [8],
    "dia_semana": [2]  # quarta-feira
})

previsao = modelo.predict(amostra)[0]
print(f"\nüöå Tempo estimado de chegada: {previsao:.1f} minutos")




'''O que esse c√≥digo faz

Cria (ou usa seu CSV) com dados coletados de √¥nibus.
Extrai vari√°veis explicativas (features) como posi√ß√£o e hor√°rio.
Treina um modelo de regress√£o linear.
Mede o erro (MAE) e a qualidade do modelo (R¬≤).
Faz uma previs√£o simulada para hor√°rio/posi√ß√£o espec√≠ficos.'''


'''Como aplicar com seus dados reais

Rodar o script de coleta da SPTrans v√°rias vezes ao longo do dia.
Salvar os dados em CSV (com latitude, longitude, hora_coleta, prefixo, etc.).
Definir um ponto fixo (ex: terminal ou parada) e calcular o tempo at√© o √¥nibus chegar l√°.
Usar esse tempo como vari√°vel alvo (y) no modelo.'''